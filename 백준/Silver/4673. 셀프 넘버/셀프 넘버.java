/*
[백준]
4673, 셀프 넘버

[문제파악]
- 셀프 넘버는 1949년 인도 수학자 D.R. Kaprekar가 이름 붙였다.
- 양의 정수 n에 대해서 d(n)을 n과 n의 각 자리수를 더하는 함수라고 정의하자.
- 예를 들어, d(75) = 75+7+5 = 87이다.
- 양의 정수 n이 주어졌을 때, 이 수를 시작해서 n, d(n), d(d(n)), d(d(d(n))), ...과 같은 무한 수열을 만들 수 있다.
- 예를 들어, 33으로 시작한다면 다음 수는 33 + 3 + 3 = 39이고, 그 다음 수는 39 + 3 + 9 = 51, 다음 수는 51 + 5 + 1 = 57이다.
- 이런식으로 다음과 같은 수열을 만들 수 있다.
- 33, 39, 51, 57, 69, 84, 96, 111, 114, 120, 123, 129, 141, ...
- n을 d(n)의 생성자라고 한다. 위의 수열에서 33은 39의 생성자이고, 39는 51의 생성자, 51은 57의 생성자이다.
- 생성자가 한 개보다 많은 경우도 있다. 예를 들어, 101은 생성자가 2개(91과 100) 있다.
- 생성자가 없는 숫자를 셀프 넘버라고 한다.
- 100보다 작은 셀프 넘버는 총 13개가 있다. 1, 3, 5, 7, 9, 20, 31, 42, 53, 64, 75, 86, 97
- 10000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 출력하는 프로그램을 작성하시오.

[입력]
- 입력은 없다.

[출력]
- 10,000보다 작거나 같은 셀프 넘버를 한 줄에 하나씩 증가하는 순서로 출력한다.

[구현방법]
- 문자열에서 문자 하나씩 잘라다가 더할 생각을 했음
- 그냥 자른 다음에 더하면 되니까..
- 근데 수학적으로 풀이하는 방법이랑 뭐가 더 빠를지 궁금함

[보완점]
*/

public class Main {
    // d(n) 함수: n + n의 각 자리수 합
    static int d(int n) {
        int sum = n;

        while (n > 0) {
            sum += n % 10;  // 일의 자리 더함
            n /= 10;        // 다음 자리로
        }
        
        return sum;
    }

    public static void main(String[] args) {
        boolean[] isGenerated = new boolean[10001];  // true면 생성자 있음

        // 1부터 10000까지 모든 수에 대해 d(n) 계산
        for (int i = 1; i <= 10000; i++) {
            int generated = d(i);  // d(n) 결과
            if (generated <= 10000) {
                isGenerated[generated] = true;  // 누군가의 생성자임
            }
        }

        // 생성자가 없는 수만 출력 → 셀프 넘버
        for (int i = 1; i <= 10000; i++) {
            if (!isGenerated[i]) {
                System.out.println(i);
            }
        }
    }
}