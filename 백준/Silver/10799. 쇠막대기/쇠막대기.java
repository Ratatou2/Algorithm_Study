/*
[백준]
10799, 쇠막대기

[문제파악]
- 여러 개의 쇠막대기를 레이저로 절단하려고 한다. 
- 효율적인 작업을 위해서 쇠막대기를 아래에서 위로 겹쳐 놓고, 레이저를 위에서 수직으로 발사하여 쇠막대기들을 자른다. 
- 쇠막대기와 레이저의 배치는 다음 조건을 만족한다.
    쇠막대기는 자신보다 긴 쇠막대기 위에만 놓일 수 있다. 
    쇠막대기를 다른 쇠막대기 위에 놓는 경우 완전히 포함되도록 놓되, 끝점은 겹치지 않도록 놓는다.
    각 쇠막대기를 자르는 레이저는 적어도 하나 존재한다.
    레이저는 어떤 쇠막대기의 양 끝점과도 겹치지 않는다.

- 이러한 레이저와 쇠막대기의 배치는 다음과 같이 괄호를 이용하여 왼쪽부터 순서대로 표현할 수 있다.
- 레이저는 여는 괄호와 닫는 괄호의 인접한 쌍 ‘( ) ’ 으로 표현된다. 또한, 모든 ‘( ) ’는 반드시 레이저를 표현한다.
- 쇠막대기의 왼쪽 끝은 여는 괄호 ‘ ( ’ 로, 오른쪽 끝은 닫힌 괄호 ‘) ’ 로 표현된다.
- 위 예의 괄호 표현은 그림 위에 주어져 있다.
- 쇠막대기는 레이저에 의해 몇 개의 조각으로 잘려지는데, 위 예에서 가장 위에 있는 두 개의 쇠막대기는 각각 3개와 2개의 조각으로 잘려지고, 이와 같은 방식으로 주어진 쇠막대기들은 총 17개의 조각으로 잘려진다.
- 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 주어졌을 때, 잘려진 쇠막대기 조각의 총 개수를 구하는 프로그램을 작성하시오.

[입력]
- 한 줄에 쇠막대기와 레이저의 배치를 나타내는 괄호 표현이 공백없이 주어진다. 
- 괄호 문자의 개수는 최대 100,000이다.

[출력]
- 잘려진 조각의 총 개수를 나타내는 정수를 한 줄에 출력한다.

[구현방법]
- 너무 어렵게 생각했던걸까...
- 레이저가 지나가면 스택에 담긴 막대기 갯수만큼 증가한다 당연하지 반으로 동강났으니까
- 그래서 일단 ) 만날 때마다 이전 input은 무엇이었는지 체크한다
- 자세한 코드 구현 방식은 아래 코드에 기술하였음

[보완점]

*/

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Stack;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        Stack<Character> stack = new Stack<>();
        int pipeCount = 0;

        String input = bf.readLine();

        for (int i = 0; i < input.length(); i++) {
            char cur = input.charAt(i);

            if (cur == '(') stack.push(cur); // '(' 이면 일단 레이저든, 막대기든 넣어야한다 (그래야 뒤에서 판별하니까)
            else { // ')' 이면 막대기인지, 레이저인지 판별 필요
                stack.pop(); // ')'를 만났으니, 이전 '(' 제거 (어차피 레이저이든, 막대기이든 stack에서 1개는 제거해줘야하기 때문에 미리 계산)

                if (input.charAt(i - 1) == '(') pipeCount += stack.size();  // 바로 이전 문자가 '('라면 레이저라는 의미이니, 현재 스택 크기만큼 조각 추가
                else pipeCount += 1; // 바로 이전 문자가 ')'라면 막대기의 끝이라는 의미, 막대기 하나 추가한다
            }
        }

        System.out.print(pipeCount);
    }
}