

/*
[백준]
2504, 괄호의 값

[문제파악]
4개의 기호 ‘(’, ‘)’, ‘[’, ‘]’를 이용해서 만들어지는 괄호열 중에서 올바른 괄호열이란 다음과 같이 정의된다.

한 쌍의 괄호로만 이루어진 ‘()’와 ‘[]’는 올바른 괄호열이다.
만일 X가 올바른 괄호열이면 ‘(X)’이나 ‘[X]’도 모두 올바른 괄호열이 된다.
X와 Y 모두 올바른 괄호열이라면 이들을 결합한 XY도 올바른 괄호열이 된다.
예를 들어 ‘(()[[]])’나 ‘(())[][]’ 는 올바른 괄호열이지만 ‘([)]’ 나 ‘(()()[]’ 은 모두 올바른 괄호열이 아니다.
우리는 어떤 올바른 괄호열 X에 대하여 그 괄호열의 값(괄호값)을 아래와 같이 정의하고 값(X)로 표시한다.

‘()’ 인 괄호열의 값은 2이다.
‘[]’ 인 괄호열의 값은 3이다.
‘(X)’ 의 괄호값은 2×값(X) 으로 계산된다.
‘[X]’ 의 괄호값은 3×값(X) 으로 계산된다.
올바른 괄호열 X와 Y가 결합된 XY의 괄호값은 값(XY)= 값(X)+값(Y) 로 계산된다.
예를 들어 ‘(()[[]])([])’ 의 괄호값을 구해보자.
‘()[[]]’ 의 괄호값이 2 + 3×3=11 이므로 ‘(()[[]])’의 괄호값은 2×11=22 이다.
그리고 ‘([])’의 값은 2×3=6 이므로 전체 괄호열의 값은 22 + 6 = 28 이다.

여러분이 풀어야 할 문제는 주어진 괄호열을 읽고 그 괄호값을 앞에서 정의한대로 계산하여 출력하는 것이다.

[입력]
첫째 줄에 괄호열을 나타내는 문자열(스트링)이 주어진다.
단 그 길이는 1 이상, 30 이하이다.

[출력]
첫째 줄에 그 괄호열의 값을 나타내는 정수를 출력한다.
만일 입력이 올바르지 못한 괄호열이면 반드시 0을 출력해야 한다.

[구현방법]
- 전형적인 stack에다가 계산식을 밀어넣었다
- stack을 사용해서 괄호를 시작할 땐 다 밀어넣고, 닫을 땐 stack의 최상단과 비교하여 한쌍이 되는지를 체크한다
    - 한쌍이라면? : 괄호 모양에 따라, 이전 수식과 그 다음괄호에 따라 수식이 정해진다
    - 한쌍이아니라면? : 그대로 종료하고 0 출력하면 됨

[보완점]
- 내가 간과한 것이 있다면 괄호는 여는 순간에 곱이 정해진 것이다 (덧셈은 닫힐 때 완성된다)
- 즉 괄호를 열 때 곱하고, 닫을 떄 이전 곱셈 상태에서 되돌려야한다
- 괄호 내부에 있는 인자들에 공통적으로 곱해주기 위함이라서 닫히면 롤백하는 것이다
- 즉, 그러기 위해서 여는 순간 범위(스코프)가 하나 더 생기므로 그 괄호의 값만큼 곱해주는 것이다.
    - 바로 윗줄에 설명한 내용과 일맥상통
- 그렇기 떄문에 닫히는 순간 result += temp를 하는 것은 이때의 temp는 해당 범위(스코프)까지 포함한 곱을 담고 있기 때문이다
- 괄호가 닫히면서 해당 범위를 떠났기에 /2, /3을 해서 자신이 원래 속한 범위(스코프)로 이동한다
- 흠.. 왤케 어렵게 느껴지지...? 얘는 복습해야할듯

## 예시 ##
(()[[]])
초기 temp=1
- ( → temp=2 (여는 스코프 ×2)
- ( → temp=4
- ) → 직전이 ( 이므로 result += 4; 스코프 종료 /2 → temp=2
- [ → temp=6 (2×3)
- [ → temp=18
- ] → 직전이 [ 이므로 result += 18; /3 → temp=6
- ] → 직전이 ](바로 닫힘 아님) → 더하지 않음; /3 → temp=2
- ) → 직전이 ](바로 닫힘 아님) → 더하지 않음; /2 → temp=1
*/

import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        String input = br.readLine();
        Stack<Character> stack = new Stack<>();

        int result = 0;
        int temp = 1;

        for (int i = 0; i < input.length(); i++) {
            char c = input.charAt(i);

            if (c == '(') {
                stack.push(c);
                temp *= 2;
            } else if (c == '[') {
                stack.push(c);
                temp *= 3;
            } else if (c == ')') {
                // 스택이 비어있거나, 짝이 안맞으면 오답이다
                if (stack.isEmpty() || stack.peek() != '(') {
                    result = 0;
                    break;
                }

                // 이전 문자를 봐서 짝이 맞으면 결과값에 더해준다 (짝이 안맞으면 아직
                if (input.charAt(i - 1) == '(') {
                    result += temp;
                }

                stack.pop();
                temp /= 2;  // 괄호가 닫혔으니 더이상의 곱셈은 없다 (= /2)로 맞춰준다
            } else if (c == ']') {
                // 스택이 비어있거나, 짝이 안맞으면 오답이다
                if (stack.isEmpty() || stack.peek() != '[') {
                    result = 0;
                    break;
                }

                // 이전 문자를 봐서 짝이 맞으면 결과값에 더한다
                if (input.charAt(i - 1) == '[') {
                    result += temp;
                }

                stack.pop();
                temp /= 3;  // 괄호가 닫혔으니 더이상의 곱셈은 없다 (= /3)으로 맞춰준다
            }
        }

        // 마지막까지 스택이 비어져있지 않으면 오답
        if (!stack.isEmpty()) {
            result = 0;
        }

        System.out.println(result);
    }
}
