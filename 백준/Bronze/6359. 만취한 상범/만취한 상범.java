
/*
[백준]
6359, 만취한 상범

[문제파악]
서강대학교 곤자가 기숙사의 지하에는 n개의 방이 일렬로 늘어선 감옥이 있다.
각 방에는 벌점을 많이 받은 학생이 구금되어있다.
그러던 어느 날, 감옥 간수인 상범이는 지루한 나머지 정신나간 게임을 하기로 결정했다.
게임의 첫 번째 라운드에서 상범이는 위스키를 한 잔 들이키고, 달려가며 감옥을 한 개씩 모두 연다.
그 다음 라운드에서는 2, 4, 6, ... 번 방을 다시 잠그고, 세 번째 라운드에서는 3, 6, 9, ... 번 방이 열려있으면 잠그고, 잠겨있다면 연다.
k번째 라운드에서는 번호가 k의 배수인 방이 열려 있으면 잠그고, 잠겨 있다면 연다.
이렇게 n번째 라운드까지 진행한 이후, 상범이는 위스키의 마지막 병을 마시고 쓰러져 잠든다.
구금되어있는 몇 명(어쩌면 0명)의 학생들은 자신의 방을 잠그지 않은 채 상범이가 쓰러져버렸단 것을 깨닫고 즉시 도망친다.
방의 개수가 주어졌을 때, 몇 명의 학생들이 도주할 수 있는지 알아보자.

[입력]
입력의 첫 번째 줄에는 테스트 케이스의 개수 T가 주어진다.
각 테스트 케이스는 한 줄에 한 개씩 방의 개수 n(5 ≤ n ≤ 100)이 주어진다.

[출력]
한 줄에 한 개씩 각 테스트 케이스의 답, 즉 몇 명이 탈출할 수 있는지를 출력한다.

[구현방법]
- 공배수 규칙 찾고 하면 아마 시간, 메모리 효율적으로 짤 수 있겠지만 일단 그냥 냅다 짜보자

- 72ms로 그리 빠르진 않다
- 자 그럼 규칙을 생각해보자 -> 문이 열려있으려면 결국 열고 닫는 횟수가 '홀수'여야한다
- 그래야 마지막 상태가 '열림' 상태일테니까
- 그리고 홀수개의 약수를 갖는 것은 완전제곱수 뿐이다 (9 -> 1, 3, 9 / 25 -> 1, 5, 25)
- 이 말인 즉? 인풋 이하의 제곱수 갯수가 되는 것이다
- 수학적 성질로다가 공식이니까 토달 여지가 없다 (= N 이하의 완전제곱수의 갯수 = √N)
- 직접 세봐도 늘 (당연히)) 똑같음 ㅇㅇ
- 100은 10개의 완전제곱수를 가지고 있음 -> 1, 4, 9, 16, 25, 36, 49, 64, 81, 100

[보완점]
*/

import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringBuilder sb = new StringBuilder();

        int T = Integer.parseInt(br.readLine());

        for (int test = 0; test < T; test++) {
            int n = Integer.parseInt(br.readLine());
            sb.append((int) Math.sqrt(n)).append("\n");
        }

        System.out.print(sb);
    }
}
