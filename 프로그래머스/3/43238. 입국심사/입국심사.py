"""
[프로그래머스] 43238, 입국심사 (https://school.programmers.co.kr/learn/courses/30/lessons/43238)

[문제파악]
1.N명이 입국 심사 대기중, 심사관마다 심사에 소요시간이 상이함
2. 초기엔 모든 심사대가 비어있다
3. 한 심사대에선 동시에 한명만 심사 가능
4. 맨 앞에 서 있는 사람은 비어있는 심사대에 가서 심사 받을 수 있음
5. 비어있는 심사대에 비해, 더 빨리 끝나는 심사대가 있다면, 기다렸다가 더 빨리 끝나는 심사대에 가도 됨
6. 모든 사람이 심사를 받는데 소요되는 시간을 최소하고 싶음
7. 모든 사람이 심사를 받는데 걸리는 시간의 최솟값을 구할 것


[입력]
1. 입국 심사 대기인원 (1 <= N < 1,000,000,000 (명))
2. 각 심사관의 심사 소요 시간 (1 <= N <= 1,000,000,000 (분))
3. 심사관 인원수 (1 <= N < 100,000)


[풀이방식]
1. 일단 단순하게 생각해보면, 대기 인원이 있는 경우 빈 자리 걍 들어가는게 베스트지
2. 그리고 마지막 인원만 계산해서 들어가는게 낫고
3. 계산 방법은 대기 시간까지 더해서 작업 소요시간들 얼마나 남았는지 계산
4. 근데 사실 심사관이 10명쯤 되고 2명쯤 남았으면 게산하는게 나음
5. 그럼 (심사관(N) - 대기 인원) < 심사관이면 계산하는게 베스트일지도?


[보완점]
1. 응 완전히 틀렸어 일단 저렇게 하려면 아래와 같은 상황이 됨
    - 심사관보다 대기인원이 적게 남았을 때, 계산을 시작
    - 그럼 이걸 모든 심사관마다 다 해야함
    - 더군다나 대기하는 시간 만큼 뒤에 있는 인원도 대기하는 것임
    - 오히려 전체적으로 늘어날 수도 있단 소리
    - 애초에 심사관이 10만명인데 대기 인원이 99999명 남았으면 그때부터 모든 심사관 검사할거야..?
    - 그러니 실패 
    - 이걸 세상 편하게, 효율적으로 하라고 '이분탐색'이란게 있다~ (그게 뭔데;;)
2. 이분탐색 : start, end 기준으로 중간점을 정하고, 중간점이 찾는 값과 일치할 때까지, start와 end를 갱신하면서 값을 찾는 방법
3. 이런건 대체 어떻게 생각하는거지...
"""


def solution(N, immigration_officers):
    result = 0                                          # 결과값
    min_wait_time = 1                                   # 최소 대기시간 (1분 걸리는건데 사실상 불가능)
    max_wait_time = max(immigration_officers) * N       # 최대 대기시간 (worst_case인 셈, 제일 오래 걸리는 시간 * 전체 대기 인원)

    # 시작 지점, 끝 지점이 뒤바뀌기 전까지 반복
    while min_wait_time <= max_wait_time:
        count = 0                                       # 시간 내에 심사 받을 수 있는 사람의 수
        mid = (min_wait_time + max_wait_time) // 2      # 중간지점 = (시작 + 끝) // 2
        for officer in immigration_officers:
            count += mid // officer                     # 각 심사관마다 주어진 시간내에 몇명이나 통과시킬 수 있는지 계산

        # 통과한 사람이 N보다 크거나 같으면 답일 가능성 있음
        if N <= count:                                  
            result = mid                                # result 일단 mid로 갱신
            max_wait_time = mid - 1                     # 더 작은 값으로도 가능하단 의미니까 mid를 하나 줄임

        # N명 미만으로 통과했으니 mid 값을 늘림
        else:
            min_wait_time = mid + 1

    return result